# coding: utf-8

"""
    TeePublic V3 search Api Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.41
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CategorySearchRequestV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'list[str]',
        'sort': 'str',
        'canvas': 'str',
        'per_page': 'int',
        'page_offset': 'int',
        'safe_search': 'bool',
        'bucket': 'str',
        'explain': 'bool'
    }

    attribute_map = {
        'categories': 'categories',
        'sort': 'sort',
        'canvas': 'canvas',
        'per_page': 'per_page',
        'page_offset': 'page_offset',
        'safe_search': 'safe_search',
        'bucket': 'bucket',
        'explain': 'explain'
    }

    def __init__(self, categories=None, sort='relevance', canvas=None, per_page=36, page_offset=1, safe_search=True, bucket=None, explain=False, _configuration=None):  # noqa: E501
        """CategorySearchRequestV1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._categories = None
        self._sort = None
        self._canvas = None
        self._per_page = None
        self._page_offset = None
        self._safe_search = None
        self._bucket = None
        self._explain = None
        self.discriminator = None

        if categories is not None:
            self.categories = categories
        if sort is not None:
            self.sort = sort
        if canvas is not None:
            self.canvas = canvas
        if per_page is not None:
            self.per_page = per_page
        if page_offset is not None:
            self.page_offset = page_offset
        if safe_search is not None:
            self.safe_search = safe_search
        if bucket is not None:
            self.bucket = bucket
        if explain is not None:
            self.explain = explain

    @property
    def categories(self):
        """Gets the categories of this CategorySearchRequestV1.  # noqa: E501

        list of categories to apply to the search algorithm  # noqa: E501

        :return: The categories of this CategorySearchRequestV1.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CategorySearchRequestV1.

        list of categories to apply to the search algorithm  # noqa: E501

        :param categories: The categories of this CategorySearchRequestV1.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def sort(self):
        """Gets the sort of this CategorySearchRequestV1.  # noqa: E501

        ranking algorithm to apply  # noqa: E501

        :return: The sort of this CategorySearchRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this CategorySearchRequestV1.

        ranking algorithm to apply  # noqa: E501

        :param sort: The sort of this CategorySearchRequestV1.  # noqa: E501
        :type: str
        """
        allowed_values = ["relevance", "popular", "newest"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort not in allowed_values):
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"  # noqa: E501
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def canvas(self):
        """Gets the canvas of this CategorySearchRequestV1.  # noqa: E501

        filter for document availability on products  # noqa: E501

        :return: The canvas of this CategorySearchRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._canvas

    @canvas.setter
    def canvas(self, canvas):
        """Sets the canvas of this CategorySearchRequestV1.

        filter for document availability on products  # noqa: E501

        :param canvas: The canvas of this CategorySearchRequestV1.  # noqa: E501
        :type: str
        """

        self._canvas = canvas

    @property
    def per_page(self):
        """Gets the per_page of this CategorySearchRequestV1.  # noqa: E501

        number of results to return per page  # noqa: E501

        :return: The per_page of this CategorySearchRequestV1.  # noqa: E501
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this CategorySearchRequestV1.

        number of results to return per page  # noqa: E501

        :param per_page: The per_page of this CategorySearchRequestV1.  # noqa: E501
        :type: int
        """

        self._per_page = per_page

    @property
    def page_offset(self):
        """Gets the page_offset of this CategorySearchRequestV1.  # noqa: E501

        number of hits to skip  # noqa: E501

        :return: The page_offset of this CategorySearchRequestV1.  # noqa: E501
        :rtype: int
        """
        return self._page_offset

    @page_offset.setter
    def page_offset(self, page_offset):
        """Sets the page_offset of this CategorySearchRequestV1.

        number of hits to skip  # noqa: E501

        :param page_offset: The page_offset of this CategorySearchRequestV1.  # noqa: E501
        :type: int
        """

        self._page_offset = page_offset

    @property
    def safe_search(self):
        """Gets the safe_search of this CategorySearchRequestV1.  # noqa: E501

        whether we include mature designs in search results  # noqa: E501

        :return: The safe_search of this CategorySearchRequestV1.  # noqa: E501
        :rtype: bool
        """
        return self._safe_search

    @safe_search.setter
    def safe_search(self, safe_search):
        """Sets the safe_search of this CategorySearchRequestV1.

        whether we include mature designs in search results  # noqa: E501

        :param safe_search: The safe_search of this CategorySearchRequestV1.  # noqa: E501
        :type: bool
        """

        self._safe_search = safe_search

    @property
    def bucket(self):
        """Gets the bucket of this CategorySearchRequestV1.  # noqa: E501

        AB test bucket  # noqa: E501

        :return: The bucket of this CategorySearchRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this CategorySearchRequestV1.

        AB test bucket  # noqa: E501

        :param bucket: The bucket of this CategorySearchRequestV1.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def explain(self):
        """Gets the explain of this CategorySearchRequestV1.  # noqa: E501

        whether to return an Elaticsearch explanation of search results  # noqa: E501

        :return: The explain of this CategorySearchRequestV1.  # noqa: E501
        :rtype: bool
        """
        return self._explain

    @explain.setter
    def explain(self, explain):
        """Sets the explain of this CategorySearchRequestV1.

        whether to return an Elaticsearch explanation of search results  # noqa: E501

        :param explain: The explain of this CategorySearchRequestV1.  # noqa: E501
        :type: bool
        """

        self._explain = explain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategorySearchRequestV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategorySearchRequestV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CategorySearchRequestV1):
            return True

        return self.to_dict() != other.to_dict()
