# coding: utf-8

"""
    TeePublic V3 search Api Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.13
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DesignSlim(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'primary_tag': 'str',
        'primary_related_tags': 'list[str]',
        'secondary_tags': 'list[str]',
        'lifetime_sales': 'int',
        'monthly_sales': 'int',
        'weekly_sales': 'int',
        'explanation': 'object'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'primary_tag': 'primary_tag',
        'primary_related_tags': 'primary_related_tags',
        'secondary_tags': 'secondary_tags',
        'lifetime_sales': 'lifetime_sales',
        'monthly_sales': 'monthly_sales',
        'weekly_sales': 'weekly_sales',
        'explanation': 'explanation'
    }

    def __init__(self, id=None, title=None, primary_tag=None, primary_related_tags=None, secondary_tags=None, lifetime_sales=None, monthly_sales=None, weekly_sales=None, explanation=None):  # noqa: E501
        """DesignSlim - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._primary_tag = None
        self._primary_related_tags = None
        self._secondary_tags = None
        self._lifetime_sales = None
        self._monthly_sales = None
        self._weekly_sales = None
        self._explanation = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if primary_tag is not None:
            self.primary_tag = primary_tag
        if primary_related_tags is not None:
            self.primary_related_tags = primary_related_tags
        if secondary_tags is not None:
            self.secondary_tags = secondary_tags
        if lifetime_sales is not None:
            self.lifetime_sales = lifetime_sales
        if monthly_sales is not None:
            self.monthly_sales = monthly_sales
        if weekly_sales is not None:
            self.weekly_sales = weekly_sales
        if explanation is not None:
            self.explanation = explanation

    @property
    def id(self):
        """Gets the id of this DesignSlim.  # noqa: E501

        design id.  # noqa: E501

        :return: The id of this DesignSlim.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DesignSlim.

        design id.  # noqa: E501

        :param id: The id of this DesignSlim.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this DesignSlim.  # noqa: E501

        design title.  # noqa: E501

        :return: The title of this DesignSlim.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DesignSlim.

        design title.  # noqa: E501

        :param title: The title of this DesignSlim.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def primary_tag(self):
        """Gets the primary_tag of this DesignSlim.  # noqa: E501

        design primary tag.  # noqa: E501

        :return: The primary_tag of this DesignSlim.  # noqa: E501
        :rtype: str
        """
        return self._primary_tag

    @primary_tag.setter
    def primary_tag(self, primary_tag):
        """Sets the primary_tag of this DesignSlim.

        design primary tag.  # noqa: E501

        :param primary_tag: The primary_tag of this DesignSlim.  # noqa: E501
        :type: str
        """

        self._primary_tag = primary_tag

    @property
    def primary_related_tags(self):
        """Gets the primary_related_tags of this DesignSlim.  # noqa: E501

        design primary related tags.  # noqa: E501

        :return: The primary_related_tags of this DesignSlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._primary_related_tags

    @primary_related_tags.setter
    def primary_related_tags(self, primary_related_tags):
        """Sets the primary_related_tags of this DesignSlim.

        design primary related tags.  # noqa: E501

        :param primary_related_tags: The primary_related_tags of this DesignSlim.  # noqa: E501
        :type: list[str]
        """

        self._primary_related_tags = primary_related_tags

    @property
    def secondary_tags(self):
        """Gets the secondary_tags of this DesignSlim.  # noqa: E501

        design secondary tags.  # noqa: E501

        :return: The secondary_tags of this DesignSlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._secondary_tags

    @secondary_tags.setter
    def secondary_tags(self, secondary_tags):
        """Sets the secondary_tags of this DesignSlim.

        design secondary tags.  # noqa: E501

        :param secondary_tags: The secondary_tags of this DesignSlim.  # noqa: E501
        :type: list[str]
        """

        self._secondary_tags = secondary_tags

    @property
    def lifetime_sales(self):
        """Gets the lifetime_sales of this DesignSlim.  # noqa: E501

        total lifetime sales  # noqa: E501

        :return: The lifetime_sales of this DesignSlim.  # noqa: E501
        :rtype: int
        """
        return self._lifetime_sales

    @lifetime_sales.setter
    def lifetime_sales(self, lifetime_sales):
        """Sets the lifetime_sales of this DesignSlim.

        total lifetime sales  # noqa: E501

        :param lifetime_sales: The lifetime_sales of this DesignSlim.  # noqa: E501
        :type: int
        """

        self._lifetime_sales = lifetime_sales

    @property
    def monthly_sales(self):
        """Gets the monthly_sales of this DesignSlim.  # noqa: E501

        total monthly sales  # noqa: E501

        :return: The monthly_sales of this DesignSlim.  # noqa: E501
        :rtype: int
        """
        return self._monthly_sales

    @monthly_sales.setter
    def monthly_sales(self, monthly_sales):
        """Sets the monthly_sales of this DesignSlim.

        total monthly sales  # noqa: E501

        :param monthly_sales: The monthly_sales of this DesignSlim.  # noqa: E501
        :type: int
        """

        self._monthly_sales = monthly_sales

    @property
    def weekly_sales(self):
        """Gets the weekly_sales of this DesignSlim.  # noqa: E501

        total weekly sales  # noqa: E501

        :return: The weekly_sales of this DesignSlim.  # noqa: E501
        :rtype: int
        """
        return self._weekly_sales

    @weekly_sales.setter
    def weekly_sales(self, weekly_sales):
        """Sets the weekly_sales of this DesignSlim.

        total weekly sales  # noqa: E501

        :param weekly_sales: The weekly_sales of this DesignSlim.  # noqa: E501
        :type: int
        """

        self._weekly_sales = weekly_sales

    @property
    def explanation(self):
        """Gets the explanation of this DesignSlim.  # noqa: E501

        es explanation.  # noqa: E501

        :return: The explanation of this DesignSlim.  # noqa: E501
        :rtype: object
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this DesignSlim.

        es explanation.  # noqa: E501

        :param explanation: The explanation of this DesignSlim.  # noqa: E501
        :type: object
        """

        self._explanation = explanation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DesignSlim, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DesignSlim):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
